pub const MEMORY_SIZE: usize = 4096;
pub const ROM_START: usize = 0x200;
pub const FONTSET_START: usize = 0x50;
pub const FONTSET: [u8; 80] = [
    0xF0, 0x90, 0x90, 0x90, 0xF0,
    0x20, 0x60, 0x20, 0x20, 0x70,
    0xF0, 0x10, 0xF0, 0x80, 0xF0,
    0xF0, 0x10, 0xF0, 0x10, 0xF0,
    0x90, 0x90, 0xF0, 0x10, 0x10,
    0xF0, 0x80, 0xF0, 0x10, 0xF0,
    0xF0, 0x80, 0xF0, 0x90, 0xF0,
    0xF0, 0x10, 0x20, 0x40, 0x40,
    0xF0, 0x90, 0xF0, 0x90, 0xF0,
    0xF0, 0x90, 0xF0, 0x10, 0xF0,
    0xF0, 0x90, 0xF0, 0x90, 0x90,
    0xE0, 0x90, 0xE0, 0x90, 0xE0,
    0xF0, 0x80, 0x80, 0x80, 0xF0,
    0xE0, 0x90, 0x90, 0x90, 0xE0,
    0xF0, 0x80, 0xF0, 0x80, 0xF0,
    0xF0, 0x80, 0xF0, 0x80, 0x80 
];

pub struct Memory {
    pub ram: [u8; MEMORY_SIZE],
}

impl Memory {
    pub fn new() -> Self {
        Self { ram: [0; MEMORY_SIZE] }
    }

    pub fn load_fontset(&mut self) {
        self.ram[FONTSET_START..FONTSET_START + FONTSET.len()]
            .copy_from_slice(&FONTSET);
    }

    pub fn load_rom(&mut self, rom: &[u8]) {
        let len = rom.len().min(MEMORY_SIZE - ROM_START);
        self.ram[ROM_START..ROM_START + len].copy_from_slice(&rom[..len]);
    }

    pub fn fetch_opcode(&self, pc: u16) -> u16 {
        let pc = pc as usize;
        ((self.ram[pc] as u16) << 8) | (self.ram[pc + 1] as u16)
    }

    pub fn read(&self, addr: u16) -> u8 {
        self.ram[addr as usize]
    }

    pub fn write(&mut self, addr: u16, value: u8) {
        self.ram[addr as usize] = value;
    }
}